? ggplot
library(ggplot2)
? ggplot
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction)) + geom_polygon(color = "black")
? aes
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))
ggplot(predictTest, aes(x = long, y = lat, group = group, fill = TestPrediction))
set.seed(144)
library(caret)
?rpart
? rpart
timesTree = rpart(popular ~ print + type + word.count, method="class", data = train, control=rpart.control(minbucket=25))
library(caret)
timesTree = rpart(popular ~ print + type + word.count, method="class", data = train, control=rpart.control(minbucket=25))
library(rpart)
library(rpart.plot)
install.packages("rpart")
library(rpart)
install.packages("rpart.plot")
library(rpart.plot)
? rpart
timesTree = rpart(popular ~ print + type + word.count, method="class", data = train, control=rpart.control(minbucket=25))
prp(timesTree)
ls()
str(train)
str(test)
library(e1071)
fitControl = trainControl( method = "cv", number = 10 )
#Specify the grid of cp values that we wish to evaluate:
cartGrid = expand.grid( .cp = (1:50)*0.01)
train(popular ~ print + type + word.count, data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
x = train(popular ~ print + type + word.count, data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
order(x)
sort(x)
table(x)
str(train)
s = read.csv("./data/stevens.csv")
s = read.csv("./Final Exam/data/stevens.csv")
str(s)
train$popular = as.numeric(train$popular)
str(train)
table(popular)
table(train$popular)
train = subset(times, spl==TRUE)
str(train)
table(train$popular)
train$popular = as.numeric(as.character(train$popular))
table(train$popular)
train(popular ~ print + type + word.count, data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
table(train$popular)
str(train)
fitControl = trainControl( method = "cv", number = 10 )
#Specify the grid of cp values that we wish to evaluate:
cartGrid = expand.grid( .cp = (1:50)*0.01)
# Perform the cross validation
train(popular ~ print + type + word.count, data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
set.seed(144)
fitControl = trainControl( method = "cv", number = 10 )
#Specify the grid of cp values that we wish to evaluate:
cartGrid = expand.grid( .cp = (1:50)*0.01)
# Perform the cross validation
train(popular ~ print + type + word.count, data = train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid )
library(tm)
library(SnowballC)
str(train)
corpus = Corpus(VectorSource(times$articles))
times$articles
str(times)
corpus = Corpus(VectorSource(times$snippet))
corpus
corpus[[1]]
corpus = tm_map(corpus, tolower)
corpus[[1]]
corpus = tm_map(corpus, removePunctuation)
corpus[[1]]
stopwords("english")[1:10]
corpus = tm_map(corpus, removeWords, stopwords("english"))
corpus[[1]]
corpus = tm_map(corpus, stemDocument)
corpus[[1]]
dtm = DocumentTermMatrix(corpus)
dtm
unique(dtm)
? DocumentTermMatrix
inspect(dtm[1000:1005,505:515])
inspect(dtm[100:105,505:515])
findFreqTerms(dtm, lowfreq=20)
spdtm = removeSparseTerms(dtm, 0.95)
spdtm
articleText = as.data.frame(as.matrix(spdtm))
table(articleText)
str(articleText)
quit
q()
setwd("C:/Users/dsbmac/Documents/NHL")
# libraries
library(XML)
# get the page html for schwdules
# scrape all the game id codes
url <- "http://www.nhl.com/ice/schedulebyseason.htm"
doc <- htmlTreeParse(url, useInternal=TRUE)
doc
# Parse the html tree, ignoring errors on the page
# pagetree <- htmlTreeParse(url, error=function(...){})
# get node that contains the play by play
# get game id codes from schedule page then get play by play from gamecode urls
# root node
xmltop = xmlRoot(doc)
rootNode = xmlRoot(doc)
rootNode
print(rootNode)[1:2]
dataTables <-getNodeSet(rootNode,"//table[@class='data schedTbl']")
# get relevant table and button links with the word recap
links <- getNodeSet(doc, "//table[@class='data schedTbl']
//a[@class='btn' and contains(.,'RECAP')]")
links
links[1]
# code ex. 2013030217
id = "2013030217"
# extract play by plays
# http://www.nhl.com/scores/htmlreports/20132014/PL030217.HTM
year = as.numeric(substr(id, 0, 4))
#create season string
season = paste(as.character(year),as.character(year+1), sep="")
season
playByplayURLFrag = "http://www.nhl.com/scores/htmlreports/"
playByplayURL = paste(playByplayURLFrag, season, "/PL", substr(id,5,nchar(id)), ".HTM", sep="")
#playByplayURL == "http://www.nhl.com/scores/htmlreports/20132014/PL030217.HTM"
playByplayURL
# retrieve play By play stat page
docPbp <- htmlTreeParse(playByplayURL, useInternal=TRUE)
docPbp
# root node
rootNode = xmlRoot(docPbp)
rootNode
class(rootNode)
pbpTables = getNodeSet(rootNode,"//table")
class(pbpTables[1])
pbpTables[[1]]
playByplay <- readHTMLTable(pbpTables[[1]])
playByplay[4970,]
pbpRows = getNodeSet(docPbp,"//tr[@class='evenColor']")
n = xmlSize(pbpRows)
n
pbpRows
pbpRows[[17]]
head(pbpRows)
#get table cells td
tds = getNodeSet(pbpRows[[3]],"td")
tds
tds[[1]]
tds[[7]]
xmlValue(tds[[7]])
# main stat extract function
# Use preallocated vectors
f4 <- function(n) {
playId <- numeric(n)
period <- numeric(n)
strength <- character(n)
time     <- character(n)
event    <- character(n)
description <- character(n)
for (i in 1:n) {
# get set of all table cells for the row
tds = getNodeSet(pbpRows[[i]], "td")
# extract values
playId[i] <- as.numeric(xmlValue(tds[[1]]))
period[i] <- as.numeric(xmlValue(tds[[2]]))
strength[i] <-          xmlValue(tds[[3]])
time[i]     <-          xmlValue(tds[[4]])
event[i]     <-          xmlValue(tds[[5]])
description[i]     <-          xmlValue(tds[[6]])
}
data.frame(playId, period, strength, time, event, description, stringsAsFactors=FALSE)
}
df =f4(n)
str(df)
tds[[7]]
onice = xmlValue(tds[[7]])
td7 = xmlValue(tds[[7]])
onice = readHTMLTable(td7)
td7
tds[[6]]
td7
tds[[7]]
td7 = tds[[7]]
td7
onice = readHTMLTable(td7)
onice
td7
oniceTables = getNodeSet(td7,"//table")
oniceTables[[1]]
oniceTables = getNodeSet(td7,"table")
oniceTables[[1]]
xmlSize(oniceTables)
td7cells = getNodeSet(td7,"td")
td7Cells = getNodeSet(td7,"td")
td7Cells[1]
td7Cells[[1]]
td7Cells = getNodeSet(td7,"/td")
td7Cells[[1]]
td7Cells = getNodeSet(td7,"//td")
td7Cells[[1]]
td7Cells = getNodeSet(td7,"/td")
td7Cells[[1]]
td7Cells = getNodeSet(td7,"//td")
td7Cells[[1]]
td7Cells = getNodeSet(td7,"td")
td7Cells[[1]]
td7 = tds[[7]]
td7Cells = getNodeSet(td7,"td")
td7Cells[[1]]
td7
class(td7)
td7[[1]]
td7[[2]]
td7[[3]]
td7[[4]]
td7[[2]]
td7Cells = getNodeSet(td7[[2]],"td")
td7Cells[[1]]
td7Cells = getNodeSet(td7[[2]],"//td")
td7Cells[[1]]
td7Cells = getNodeSet(td7[[2]],"/td")
td7Cells[[1]]
td7Cells = getNodeSet(td7[[2]],"td")
td7Cells[[1]]
td7[[2]]
